# use H2 Database
spring.h2.console.enabled=true
#Set logging level for application code to debug
logging.level.com.nsa.mhasite=debug

# SQL Queries
sql.user.by.username=select id, username, password from user where username=?
sql.create.user.all=CALL registerUser (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.create.user=insert into user (username, password) values (?, ?)
sql.create.user.role=insert into user_role (userid, role) values (?, ?)
sql.create.volunteer=insert into user_volunteer (user_id, first_name, surname, phone_number, emergency_number, mha_tennant, previous_volunteer, volunteer_experience, conditions, condition_details, medication, medication_details, allergies, allergy_details) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.create.applicant=insert into volunteer_application (first_name, surname, username, phone_number, emergency_number, address_line_1, address_line_2, city, postcode, mha_tennant, previous_volunteer, volunteer_experience, conditions, condition_details, medication, medication_details, allergies, allergy_details) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
sql.find.volunteer.by.search = Select uv.* from user_volunteer uv, user u where uv.user_id = u.id and (uv.first_name like ? or uv.surname like ? or u.username like ?)
sql.find.address.by.user.id = Select * from address where user_id = ?
sql.create.address=insert into address (address_line_1, address_line_2, city, postcode, user_id) values (?, ?, ?, ?, ?)
sql.find.volunteer.by.username = Select uv.* from user_volunteer uv, user u where uv.user_id = u.id and u.username = ?
sql.find.volunteer.by.user.id = Select * from user_volunteer where user_id = ?
sql.update.user.email=update user set username = ? where id = ?
sql.update.user.password=update user set password = ? where id = ?
sql.update.user.phone=update user_volunteer set phone_number = ? where user_id = ?
sql.update.user.emergency.phone=update user_volunteer set emergency_number = ? where user_id = ?
sql.update.volunteer.info = update user_volunteer set first_name = ?, surname = ?, phone_number = ?, emergency_number = ?, mha_tennant = ?, previous_volunteer = ?, volunteer_experience = ?, conditions = ?, condition_details = ?, medication = ?, medication_details = ?, allergies = ?, allergy_details = ? where user_id = ?
sql.update.volunteer.address = update address set address_line_1 = ?, address_line_2 = ?, city = ?, postcode = ? where user_id = ?
sql.give.user = update user_volunteer set current_balance = current_balance + ?, total_amount = total_amount + ? where user_id = ?
sql.take.user = update user_volunteer set current_balance = current_balance - ?, total_amount = total_amount - ? where user_id = ?
sql.create.allocation = insert into allocation (date_allocated, credits_allocated, reason, user_id) values (?, ?, ?, ?)
sql.redeem.reward = call redeemReward (?, ?)
spring.jpa.hibernate.ddl-auto=none
spring.datasource.url=jdbc:mysql://localhost:3306/mha
spring.datasource.username=root
spring.datasource.password=comsc
spring.datasource.platform=MYSQL
server.port=8081

##References from: https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/

##REFERENCING STARTS HERE:

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=./uploads

##REFERENCING ENDS HERE

spring.mail.properties.mail.smtp.trust=smtp.gmail.com
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=mhavolunteering@gmail.com
spring.mail.password=Volunteering123!
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true